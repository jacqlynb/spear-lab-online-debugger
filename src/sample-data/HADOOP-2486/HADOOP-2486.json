{
  "exception": [],
  "log": [
    [
      {
        "lineNumber": 725,
        "column": 0,
        "methodName": "copyOutput",
        "className": "ReduceTask",
        "content": "/**\n * Copies a a map output from a remote host, via HTTP.\n * @param currentLocation the map output location to be copied\n * @return the path (fully qualified) of the copied file\n * @throws IOException if there is an error copying the file\n * @throws InterruptedException if the copier should give up\n */\nprivate long copyOutput(MapOutputLocation loc) throws IOException, InterruptedException {\n    // check if we still need to copy the output from this location\n    if (!neededOutputs.contains(loc.getMapId()) || obsoleteMapIds.contains(loc.getMapTaskId())) {\n        return CopyResult.OBSOLETE;\n    }\n    String reduceId = reduceTask.getTaskId();\n    LOG.info(reduceId + \" Copying \" + loc.getMapTaskId() + \" output from \" + loc.getHost() + \".\");\n    // a temp filename. If this file gets created in ramfs, we're fine,\n    // else, we will check the localFS to find a suitable final location\n    // for this path\n    Path filename = new Path(\"/\" + reduceId + \"/map_\" + loc.getMapId() + \".out\");\n    // a working filename that will be unique to this attempt\n    Path tmpFilename = new Path(filename + \"-\" + id);\n    // this copies the map output file\n    tmpFilename = loc.getFile(inMemFileSys, localFileSys, shuffleClientMetrics, tmpFilename, lDirAlloc, conf, reduceTask.getPartition(), STALLED_COPY_TIMEOUT, reporter);\n    if (!neededOutputs.contains(loc.getMapId())) {\n        if (tmpFilename != null) {\n            FileSystem fs = tmpFilename.getFileSystem(conf);\n            fs.delete(tmpFilename);\n        }\n        return CopyResult.OBSOLETE;\n    }\n    if (tmpFilename == null)\n        throw new IOException(\"File \" + filename + \"-\" + id + \" not created\");\n    long bytes = -1;\n    // lock the ReduceTask while we do the rename\n    synchronized (ReduceTask.this) {\n        // This file could have been created in the inmemory\n        // fs or the localfs. So need to get the filesystem owning the path.\n        FileSystem fs = tmpFilename.getFileSystem(conf);\n        if (!neededOutputs.contains(loc.getMapId())) {\n            fs.delete(tmpFilename);\n            return CopyResult.OBSOLETE;\n        }\n        bytes = fs.getLength(tmpFilename);\n        // resolve the final filename against the directory where the tmpFile\n        // got created\n        filename = new Path(tmpFilename.getParent(), filename.getName());\n        // will be thrown).\n        if (!fs.rename(tmpFilename, filename)) {\n            fs.delete(tmpFilename);\n            bytes = -1;\n            throw new IOException(\"failure to rename map output \" + tmpFilename);\n        }\n        LOG.info(reduceId + \" done copying \" + loc.getMapTaskId() + \" output from \" + loc.getHost() + \".\");\n        // mergeInProgress\n        if (!mergeInProgress && (inMemFileSys.getPercentUsed() >= MAX_INMEM_FILESYS_USE || (mergeThreshold > 0 && inMemFileSys.getNumFiles(MAP_OUTPUT_FILTER) >= mergeThreshold)) && mergeThrowable == null) {\n            LOG.info(reduceId + \" InMemoryFileSystem \" + inMemFileSys.getUri().toString() + \" is \" + inMemFileSys.getPercentUsed() + \" full. Triggering merge\");\n            InMemFSMergeThread m = new InMemFSMergeThread(inMemFileSys, (LocalFileSystem) localFileSys, sorter);\n            m.setName(\"Thread for merging in memory files\");\n            m.setDaemon(true);\n            mergeInProgress = true;\n            m.start();\n        }\n        neededOutputs.remove(loc.getMapId());\n    }\n    return bytes;\n}"
      },
      {
        "lineNumber": 733,
        "column": 0,
        "methodName": "getTaskId"
      },
      {
        "lineNumber": 744,
        "column": 0,
        "methodName": "getFile",
        "className": "InMemoryFileSystem"
      },
      {
        "lineNumber": 746,
        "column": 0,
        "methodName": "getPartition"
      },
      {
        "lineNumber": 763,
        "column": 0,
        "methodName": "getFileSystem"
      },
      {
        "lineNumber": 764,
        "column": 0,
        "methodName": "contains",
        "className": "MapOutputLocation"
      },
      {
        "lineNumber": 769,
        "column": 0,
        "methodName": "getLength",
        "className": "Path"
      },
      {
        "lineNumber": 772,
        "column": 0,
        "methodName": "getParent",
        "className": "Path"
      },
      {
        "lineNumber": 772,
        "column": 0,
        "methodName": "getName",
        "className": "Path"
      },
      {
        "lineNumber": 775,
        "column": 0,
        "methodName": "rename",
        "className": "Path"
      },
      {
        "lineNumber": 776,
        "column": 0,
        "methodName": "delete",
        "className": "Path"
      }
    ],
    [
      {
        "lineNumber": 744,
        "column": 0,
        "methodName": "getFile",
        "className": "InMemoryFileSystem"
      },
      {
        "lineNumber": 746,
        "column": 0,
        "methodName": "getPartition"
      },
      {
        "lineNumber": 763,
        "column": 0,
        "methodName": "getFileSystem"
      },
      {
        "lineNumber": 764,
        "column": 0,
        "methodName": "contains",
        "className": "MapOutputLocation"
      },
      {
        "lineNumber": 769,
        "column": 0,
        "methodName": "getLength",
        "className": "Path"
      },
      {
        "lineNumber": 772,
        "column": 0,
        "methodName": "getParent",
        "className": "Path"
      },
      {
        "lineNumber": 772,
        "column": 0,
        "methodName": "getName",
        "className": "Path"
      },
      {
        "lineNumber": 775,
        "column": 0,
        "methodName": "rename",
        "className": "Path"
      },
      {
        "lineNumber": 776,
        "column": 0,
        "methodName": "delete",
        "className": "Path"
      }
    ]
  ]
}